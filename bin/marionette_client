#!/usr/bin/env python
# coding: utf-8

import sys
import argparse

from twisted.internet import defer
from twisted.internet import protocol
from twisted.internet import reactor
from twisted.python import log

sys.path.append(".")

import marionette_tg
import marionette_tg.conf

parser = argparse.ArgumentParser(
    description='Marionette proxy client.')
parser.add_argument('--client_ip', '-cip', dest='client_ip', required=False,
    help='IP address for client to bind to')
parser.add_argument('--client_port', '-cport', dest='client_port',
    required=False, help='port for client to bind to')
parser.add_argument('--server_ip', '-sip', dest='server_ip', required=False,
    help='server IP address to connect to')
parser.add_argument('--format', '-f', dest='format', required=True,
    help='Marionette format to use for connection')
args = parser.parse_args()

if args.server_ip != None:
    marionette_tg.conf.set('server.server_ip', str(args.server_ip))
if args.client_ip != None:
    marionette_tg.conf.set('client.client_ip', str(args.client_ip))
if args.client_port != None:
    marionette_tg.conf.set('client.client_port', int(args.client_port))

LOCAL_IP = marionette_tg.conf.get('client.client_ip')
LOCAL_PORT = marionette_tg.conf.get('client.client_port')

FORMAT_VERSION = None
if ':' in args.format:
    FORMAT, FORMAT_VERSION = args.format.split(':', 1)
else:
    FORMAT = str(args.format)


class ProxyClient(protocol.Protocol):

    def connectionMade(self):
        log.msg("ProxyClient.connectionMade")
        self.srv_queue = defer.DeferredQueue()
        self.srv_queue.get().addCallback(self.clientDataReceived)
        self.client_stream_ = client.start_new_stream(self.srv_queue)

    def clientDataReceived(self, chunk):
        log.msg(
            "ProxyClient: writing %d bytes to original client" %
            len(chunk))

        self.transport.write(chunk)
        self.srv_queue.get().addCallback(self.clientDataReceived)

    def dataReceived(self, chunk):
        log.msg("ProxyClient: %d bytes received" % len(chunk))
        self.client_stream_.push(chunk)

    def connectionLost(self, why):
        log.msg("ProxyClient.connectionLost: " + str(why))
        self.client_stream_.terminate()


if __name__ == "__main__":
    if marionette_tg.conf.get("general.debug"):
        log.startLogging(sys.stdout)

    client = marionette_tg.Client(FORMAT, FORMAT_VERSION)

    factory = protocol.Factory()
    factory.protocol = ProxyClient
    reactor.listenTCP(LOCAL_PORT, factory, interface=LOCAL_IP)
    reactor.callFromThread(client.execute, reactor)

    reactor.run()
