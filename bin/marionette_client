#!/usr/bin/env python
# coding: utf-8

import sys

from twisted.internet import defer
from twisted.internet import protocol
from twisted.internet import reactor
from twisted.python import log
from twisted.internet import task

sys.path.append(".")

import marionette

LOCAL_IP    = str(sys.argv[1])
LOCAL_PORT  = int(sys.argv[2])


class ProxyClient(protocol.Protocol):
    def connectionMade(self):
        log.msg("ProxyClient.connectionMade")
        self.srv_queue = defer.DeferredQueue()
        self.srv_queue.get().addCallback(self.clientDataReceived)
        self.client_stream_ = client.start_new_stream(self.srv_queue)

    def clientDataReceived(self, chunk):
        log.msg("ProxyClient: writing %d bytes to original client" % len(chunk))
        self.transport.write(chunk)
        self.transport.doWrite()
        self.srv_queue.get().addCallback(self.clientDataReceived)

    def dataReceived(self, chunk):
        log.msg("ProxyClient: %d bytes received" % len(chunk))
        self.client_stream_.push(chunk)

    def connectionLost(self, why):
        log.msg("ProxyClient.connectionLost: " + str(why))
        self.client_stream_.terminate()


if __name__ == "__main__":
    #log.startLogging(sys.stdout)

    format = 'http_simple_blocking'
    client = marionette.Client(format)
    client.start()

    factory = protocol.Factory()
    factory.protocol = ProxyClient
    reactor.listenTCP(LOCAL_PORT, factory, interface=LOCAL_IP)

    #l = task.LoopingCall(client.do_one_run)
    #l.start(0.01)

    reactor.run()
